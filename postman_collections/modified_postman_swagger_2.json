{
  "item": [
    {
      "id": "c2dc4472-c996-4a54-843e-990f573d5fe2",
      "name": "pet",
      "item": [
        {
          "id": "a9c96112-293a-4fef-a38b-e8f50c8a2e77",
          "name": "Update an existing pet",
          "request": {
            "name": "Update an existing pet",
            "description": {
              "content": "Update an existing pet by Id",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "pet"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "auth": {
              "type": "oauth2",
              "oauth2": [
                {
                  "key": "scope",
                  "value": "write:pets read:pets"
                },
                {
                  "key": "authUrl",
                  "value": "https://petstore3.swagger.io/oauth/authorize"
                },
                {
                  "key": "grant_type",
                  "value": "implicit"
                }
              ]
            },
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "disabled": false,
                  "key": "name",
                  "value": "{{name}}",
                  "description": "(Required) "
                },
                {
                  "disabled": false,
                  "key": "photoUrls",
                  "value": "{{photoUrls}}",
                  "description": "(Required) "
                },
                {
                  "disabled": false,
                  "key": "photoUrls",
                  "value": "{{photoUrls}}",
                  "description": "(Required) "
                },
                {
                  "disabled": false,
                  "key": "id",
                  "value": "{{id}}"
                },
                {
                  "disabled": false,
                  "key": "id",
                  "value": "{{id}}"
                },
                {
                  "disabled": false,
                  "key": "name",
                  "value": "{{name}}"
                },
                {
                  "disabled": false,
                  "key": "tags",
                  "value": "{{tags}}"
                },
                {
                  "disabled": false,
                  "key": "tags",
                  "value": "{{tags}}"
                },
                {
                  "disabled": false,
                  "key": "status",
                  "value": "{{status}}",
                  "description": "pet status in the store"
                }
              ]
            }
          },
          "response": [
            {
              "id": "e17e96dc-234b-4b8d-b606-b0cec38c654b",
              "name": "Successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "pet"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: oauth2",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "key": "name",
                      "value": "{{name}}"
                    },
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "key": "photoUrls",
                      "value": "{{photoUrls}}"
                    },
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "key": "photoUrls",
                      "value": "{{photoUrls}}"
                    },
                    {
                      "disabled": false,
                      "key": "id",
                      "value": "{{id}}"
                    },
                    {
                      "disabled": false,
                      "key": "id",
                      "value": "{{id}}"
                    },
                    {
                      "disabled": false,
                      "key": "name",
                      "value": "{{name}}"
                    },
                    {
                      "disabled": false,
                      "key": "tags",
                      "value": "{{tags}}"
                    },
                    {
                      "disabled": false,
                      "key": "tags",
                      "value": "{{tags}}"
                    },
                    {
                      "disabled": false,
                      "description": {
                        "content": "pet status in the store",
                        "type": "text/plain"
                      },
                      "key": "status",
                      "value": "{{status}}"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"name\": \"doggie\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"id\": 10,\n  \"category\": {\n    \"id\": 1,\n    \"name\": \"Dogs\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "2d2a12dc-b57c-41eb-873d-fff41837e419",
              "name": "Invalid ID supplied",
              "originalRequest": {
                "url": {
                  "path": [
                    "pet"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: oauth2",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "key": "name",
                      "value": "{{name}}"
                    },
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "key": "photoUrls",
                      "value": "{{photoUrls}}"
                    },
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "key": "photoUrls",
                      "value": "{{photoUrls}}"
                    },
                    {
                      "disabled": false,
                      "key": "id",
                      "value": "{{id}}"
                    },
                    {
                      "disabled": false,
                      "key": "id",
                      "value": "{{id}}"
                    },
                    {
                      "disabled": false,
                      "key": "name",
                      "value": "{{name}}"
                    },
                    {
                      "disabled": false,
                      "key": "tags",
                      "value": "{{tags}}"
                    },
                    {
                      "disabled": false,
                      "key": "tags",
                      "value": "{{tags}}"
                    },
                    {
                      "disabled": false,
                      "description": {
                        "content": "pet status in the store",
                        "type": "text/plain"
                      },
                      "key": "status",
                      "value": "{{status}}"
                    }
                  ]
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "fc52b8b7-ffeb-4f7f-ad7c-bd2afbf81d0d",
              "name": "Pet not found",
              "originalRequest": {
                "url": {
                  "path": [
                    "pet"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: oauth2",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "key": "name",
                      "value": "{{name}}"
                    },
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "key": "photoUrls",
                      "value": "{{photoUrls}}"
                    },
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "key": "photoUrls",
                      "value": "{{photoUrls}}"
                    },
                    {
                      "disabled": false,
                      "key": "id",
                      "value": "{{id}}"
                    },
                    {
                      "disabled": false,
                      "key": "id",
                      "value": "{{id}}"
                    },
                    {
                      "disabled": false,
                      "key": "name",
                      "value": "{{name}}"
                    },
                    {
                      "disabled": false,
                      "key": "tags",
                      "value": "{{tags}}"
                    },
                    {
                      "disabled": false,
                      "key": "tags",
                      "value": "{{tags}}"
                    },
                    {
                      "disabled": false,
                      "description": {
                        "content": "pet status in the store",
                        "type": "text/plain"
                      },
                      "key": "status",
                      "value": "{{status}}"
                    }
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "85d8b6c5-a807-4c93-9944-5cf34d0b4df7",
              "name": "Validation exception",
              "originalRequest": {
                "url": {
                  "path": [
                    "pet"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: oauth2",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "key": "name",
                      "value": "{{name}}"
                    },
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "key": "photoUrls",
                      "value": "{{photoUrls}}"
                    },
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "key": "photoUrls",
                      "value": "{{photoUrls}}"
                    },
                    {
                      "disabled": false,
                      "key": "id",
                      "value": "{{id}}"
                    },
                    {
                      "disabled": false,
                      "key": "id",
                      "value": "{{id}}"
                    },
                    {
                      "disabled": false,
                      "key": "name",
                      "value": "{{name}}"
                    },
                    {
                      "disabled": false,
                      "key": "tags",
                      "value": "{{tags}}"
                    },
                    {
                      "disabled": false,
                      "key": "tags",
                      "value": "{{tags}}"
                    },
                    {
                      "disabled": false,
                      "description": {
                        "content": "pet status in the store",
                        "type": "text/plain"
                      },
                      "key": "status",
                      "value": "{{status}}"
                    }
                  ]
                }
              },
              "status": "Method Not Allowed",
              "code": 405,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Importing fs module to read user input file\nvar fs = require('fs');\n\n// Reading user input from the file\nvar userInput = fs.readFileSync('/var/tmp/Roost/RoostGPT/apiTest0911/ec145363-0e22-43b0-b60a-5e1204e5e2a5/roost_user_input.txt', 'utf8');\n\n// Parsing user input to JSON\nvar userInputJson = JSON.parse(userInput);\n\n// Compare the statusCode variable with the response code for assertion\npm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n\nif (pm.response.code == 200){\n    pm.test(\"Successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n\n        // Testing each field provided by user input\n        for (var key in userInputJson) {\n            pm.test('Response has the `' + key + '` field',function(){\n                const responseData = pm.response.json();\n                if(pm.expect(responseData).to.have.nested.property(key)){\n                    pm.expect(typeof _.get(responseData, key, \"\")).to.equal(typeof userInputJson[key]);\n                }\n            })\n        }\n    });\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Invalid ID supplied\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n    });\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Pet not found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n    });\n}\n\nif (pm.response.code == 405){\n    pm.test(\"Validation exception\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Method Not Allowed\");\n    });\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "d678e29d-d7a4-4621-bc3b-dc2ab68a6300",
          "name": "Add a new pet to the store",
          "request": {
            "name": "Add a new pet to the store",
            "description": {
              "content": "Add a new pet to the store",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "pet"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2",
              "oauth2": [
                {
                  "key": "scope",
                  "value": "write:pets read:pets"
                },
                {
                  "key": "authUrl",
                  "value": "https://petstore3.swagger.io/oauth/authorize"
                },
                {
                  "key": "grant_type",
                  "value": "implicit"
                }
              ]
            },
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "disabled": false,
                  "key": "name",
                  "value": "{{name}}",
                  "description": "(Required) "
                },
                {
                  "disabled": false,
                  "key": "photoUrls",
                  "value": "{{photoUrls}}",
                  "description": "(Required) "
                },
                {
                  "disabled": false,
                  "key": "photoUrls",
                  "value": "{{photoUrls}}",
                  "description": "(Required) "
                },
                {
                  "disabled": false,
                  "key": "id",
                  "value": "{{id}}"
                },
                {
                  "disabled": false,
                  "key": "id",
                  "value": "{{id}}"
                },
                {
                  "disabled": false,
                  "key": "name",
                  "value": "{{name}}"
                },
                {
                  "disabled": false,
                  "key": "tags",
                  "value": "{{tags}}"
                },
                {
                  "disabled": false,
                  "key": "tags",
                  "value": "{{tags}}"
                },
                {
                  "disabled": false,
                  "key": "status",
                  "value": "{{status}}",
                  "description": "pet status in the store"
                }
              ]
            }
          },
          "response": [
            {
              "id": "7397ab1d-f39c-41a4-bc6e-d3ccea23b821",
              "name": "Successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "pet"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: oauth2",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "key": "name",
                      "value": "{{name}}"
                    },
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "key": "photoUrls",
                      "value": "{{photoUrls}}"
                    },
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "key": "photoUrls",
                      "value": "{{photoUrls}}"
                    },
                    {
                      "disabled": false,
                      "key": "id",
                      "value": "{{id}}"
                    },
                    {
                      "disabled": false,
                      "key": "id",
                      "value": "{{id}}"
                    },
                    {
                      "disabled": false,
                      "key": "name",
                      "value": "{{name}}"
                    },
                    {
                      "disabled": false,
                      "key": "tags",
                      "value": "{{tags}}"
                    },
                    {
                      "disabled": false,
                      "key": "tags",
                      "value": "{{tags}}"
                    },
                    {
                      "disabled": false,
                      "description": {
                        "content": "pet status in the store",
                        "type": "text/plain"
                      },
                      "key": "status",
                      "value": "{{status}}"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"name\": \"doggie\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"id\": 10,\n  \"category\": {\n    \"id\": 1,\n    \"name\": \"Dogs\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "61217763-f08a-4ea5-a478-ed3be587f4dc",
              "name": "Invalid input",
              "originalRequest": {
                "url": {
                  "path": [
                    "pet"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: oauth2",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "key": "name",
                      "value": "{{name}}"
                    },
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "key": "photoUrls",
                      "value": "{{photoUrls}}"
                    },
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "key": "photoUrls",
                      "value": "{{photoUrls}}"
                    },
                    {
                      "disabled": false,
                      "key": "id",
                      "value": "{{id}}"
                    },
                    {
                      "disabled": false,
                      "key": "id",
                      "value": "{{id}}"
                    },
                    {
                      "disabled": false,
                      "key": "name",
                      "value": "{{name}}"
                    },
                    {
                      "disabled": false,
                      "key": "tags",
                      "value": "{{tags}}"
                    },
                    {
                      "disabled": false,
                      "key": "tags",
                      "value": "{{tags}}"
                    },
                    {
                      "disabled": false,
                      "description": {
                        "content": "pet status in the store",
                        "type": "text/plain"
                      },
                      "key": "status",
                      "value": "{{status}}"
                    }
                  ]
                }
              },
              "status": "Method Not Allowed",
              "code": 405,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Read user input file\nconst fs = require('fs');\nconst path = '/var/tmp/Roost/RoostGPT/apiTest0911/ec145363-0e22-43b0-b60a-5e1204e5e2a5/roost_user_input.txt';\nconst userInput = fs.readFileSync(path, 'utf-8');\n\n// Convert the user input to JSON\nconst userInputJSON = JSON.parse(userInput);\n\n// Use the user input for the testing\npm.test(\"User input is used in the request\", function () {\n    pm.expect(pm.request.body.raw).to.include(userInput);\n});\n\n// Check the response status\npm.test(\"Status code is 200\", function () {\n    pm.response.to.have.status(200);\n});\n\n// Check the response time\npm.test(\"Response time is less than 800ms\", function () {\n    pm.expect(pm.response.responseTime).to.be.below(800);\n});\n\n// Check the response body\npm.test(\"Response body has correct structure\", function () {\n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an(\"object\");\n    pm.expect(jsonData).to.have.property(\"name\");\n    pm.expect(jsonData.name).to.eql(userInputJSON.name);\n    pm.expect(jsonData).to.have.property(\"category\");\n    pm.expect(jsonData.category).to.be.an(\"object\");\n    pm.expect(jsonData.category).to.have.property(\"id\");\n    pm.expect(jsonData.category.id).to.eql(userInputJSON.category.id);\n    pm.expect(jsonData.category).to.have.property(\"name\");\n    pm.expect(jsonData.category.name).to.eql(userInputJSON.category.name);\n    pm.expect(jsonData).to.have.property(\"photoUrls\");\n    pm.expect(jsonData.photoUrls).to.be.an(\"array\");\n    pm.expect(jsonData).to.have.property(\"tags\");\n    pm.expect(jsonData.tags).to.be.an(\"array\");\n    pm.expect(jsonData).to.have.property(\"status\");\n    pm.expect(jsonData.status).to.eql(userInputJSON.status);\n});\n\n// Check for invalid input\npm.test(\"Invalid input returns 405\", function () {\n    if(pm.response.status === 405){\n        pm.expect(pm.response.status).to.eql(\"Method Not Allowed\");\n    }\n});\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "43fefe3e-4f14-49f3-b760-f06d72b1051e",
          "name": "Finds Pets by status",
          "request": {
            "name": "Finds Pets by status",
            "description": {
              "content": "Multiple status values can be provided with comma separated strings",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "pet",
                "findByStatus"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "status",
                  "value": "{{status}}",
                  "description": "Status values that need to be considered for filter"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "oauth2",
              "oauth2": [
                {
                  "key": "scope",
                  "value": "write:pets read:pets"
                },
                {
                  "key": "authUrl",
                  "value": "https://petstore3.swagger.io/oauth/authorize"
                },
                {
                  "key": "grant_type",
                  "value": "implicit"
                }
              ]
            }
          },
          "response": [
            {
              "id": "f47e9a27-d749-4a1f-88ae-5f011ab8ac9d",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "pet",
                    "findByStatus"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "status",
                      "value": "{{status}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: oauth2",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "[\n  {\n    \"name\": \"doggie\",\n    \"photoUrls\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"id\": 10,\n    \"category\": {\n      \"id\": 1,\n      \"name\": \"Dogs\"\n    },\n    \"tags\": [\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      }\n    ],\n    \"status\": \"<string>\"\n  },\n  {\n    \"name\": \"doggie\",\n    \"photoUrls\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"id\": 10,\n    \"category\": {\n      \"id\": 1,\n      \"name\": \"Dogs\"\n    },\n    \"tags\": [\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      }\n    ],\n    \"status\": \"<string>\"\n  }\n]",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "128b2e89-2b25-4280-ad36-daaae68a9c48",
              "name": "Invalid status value",
              "originalRequest": {
                "url": {
                  "path": [
                    "pet",
                    "findByStatus"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "status",
                      "value": "{{status}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: oauth2",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Load user-provided input\nconst fs = require('fs');\nconst userInputPath = '/var/tmp/Roost/RoostGPT/apiTest0911/ec145363-0e22-43b0-b60a-5e1204e5e2a5/roost_user_input.txt';\nconst userInput = fs.readFileSync(userInputPath, 'utf8');\n\n// Convert user input into JSON\nlet jsonUserInput;\ntry {\n    jsonUserInput = JSON.parse(userInput);\n} catch (error) {\n    console.error(`Error parsing user input: ${error}`);\n}\n\n// Compare the statusCode variable with the response code for assertion\npm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n\n        // Validate the response with user-provided input\n        if (jsonUserInput) {\n            const responseData = pm.response.json();\n            pm.expect(responseData).to.deep.equal(jsonUserInput);\n        }\n    });\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Invalid status value\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n    });\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "262685b2-3eae-4af8-bc2a-1b37cda0d201",
          "name": "Finds Pets by tags",
          "request": {
            "name": "Finds Pets by tags",
            "description": {
              "content": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "pet",
                "findByTags"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "tags",
                  "value": "{{tags}}",
                  "description": "Tags to filter by"
                },
                {
                  "disabled": false,
                  "key": "tags",
                  "value": "{{tags}}",
                  "description": "Tags to filter by"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "oauth2",
              "oauth2": [
                {
                  "key": "scope",
                  "value": "write:pets read:pets"
                },
                {
                  "key": "authUrl",
                  "value": "https://petstore3.swagger.io/oauth/authorize"
                },
                {
                  "key": "grant_type",
                  "value": "implicit"
                }
              ]
            }
          },
          "response": [
            {
              "id": "f312c4b5-1b3c-4551-a606-cd124e9cc9c5",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "pet",
                    "findByTags"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "tags",
                      "value": "{{tags}}"
                    },
                    {
                      "key": "tags",
                      "value": "{{tags}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: oauth2",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "[\n  {\n    \"name\": \"doggie\",\n    \"photoUrls\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"id\": 10,\n    \"category\": {\n      \"id\": 1,\n      \"name\": \"Dogs\"\n    },\n    \"tags\": [\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      }\n    ],\n    \"status\": \"<string>\"\n  },\n  {\n    \"name\": \"doggie\",\n    \"photoUrls\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"id\": 10,\n    \"category\": {\n      \"id\": 1,\n      \"name\": \"Dogs\"\n    },\n    \"tags\": [\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      }\n    ],\n    \"status\": \"<string>\"\n  }\n]",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "823044f6-22cb-4993-8af0-f2f6a2744fd5",
              "name": "Invalid tag value",
              "originalRequest": {
                "url": {
                  "path": [
                    "pet",
                    "findByTags"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "tags",
                      "value": "{{tags}}"
                    },
                    {
                      "key": "tags",
                      "value": "{{tags}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: oauth2",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Import fs module for reading user input\nvar fs = require('fs');\n\n// Read user input\nvar userInput = fs.readFileSync('/var/tmp/Roost/RoostGPT/apiTest0911/ec145363-0e22-43b0-b60a-5e1204e5e2a5/roost_user_input.txt', 'utf8');\n\n// Parse user input as JSON\nvar userInputJSON = JSON.parse(userInput);\n\n// Compare the statusCode variable with the response code for assertion\npm.test(\"Status code is correct\", function () {\n    pm.expect(pm.response.code).to.eql(userInputJSON.expectedStatusCode);\n});\n\n// Test response time\npm.test(\"Response time is less than 800ms\", function () {\n    pm.expect(pm.response.responseTime).to.be.below(800);\n});\n\n// Test response status based on expected status code\nif (userInputJSON.expectedStatusCode == 200){\n    pm.test(\"Response status is OK\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n}\n\nif (userInputJSON.expectedStatusCode == 400){\n    pm.test(\"Response status is Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n    });\n}\n\n// Test response body\npm.test(\"Response body is correct\", function () {\n    pm.expect(pm.response.json()).to.eql(userInputJSON.expectedResponseBody);\n});\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "733fb8ab-e139-41b6-93a8-1583d707a37a",
          "name": "{petId}",
          "item": [
            {
              "id": "21fd1a9e-6c3d-49fb-b1ee-34d426c9253e",
              "name": "Find pet by ID",
              "request": {
                "name": "Find pet by ID",
                "description": {
                  "content": "Returns a single pet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "pet",
                    ":petId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{petId}}",
                      "key": "petId",
                      "description": "(Required) ID of pet to return"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "api_key"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "f4086ba7-0594-4b78-a1f7-f6d1e060cfdf",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "pet",
                        ":petId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{petId}}",
                          "key": "petId",
                          "description": "(Required) ID of pet to return"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "api_key",
                        "value": "{{api_key}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"name\": \"doggie\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"id\": 10,\n  \"category\": {\n    \"id\": 1,\n    \"name\": \"Dogs\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "bc4f3642-0398-4b27-b64d-2c3e82ce0d4e",
                  "name": "Invalid ID supplied",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "pet",
                        ":petId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{petId}}",
                          "key": "petId",
                          "description": "(Required) ID of pet to return"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "api_key",
                        "value": "{{api_key}}"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                },
                {
                  "id": "323b9898-3be8-40f3-8e27-897ea828ec21",
                  "name": "Pet not found",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "pet",
                        ":petId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{petId}}",
                          "key": "petId",
                          "description": "(Required) ID of pet to return"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "api_key",
                        "value": "{{api_key}}"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\n// Importing the fs module to read user input\nconst fs = require('fs');\n\n// Reading user input from the file\nconst userInput = fs.readFileSync('/var/tmp/Roost/RoostGPT/apiTest0911/ec145363-0e22-43b0-b60a-5e1204e5e2a5/roost_user_input.txt', 'utf-8');\n\n// Parsing the user input into JSON\nlet userInputJson = JSON.parse(userInput);\n\n// Compare the statusCode variable with the response code for assertion\npm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n\n        // Checking if all the properties in the user input are present in the response\n        for(let key in userInputJson){\n            pm.test(`Response has the ${key} field`,function(){\n                const responseData = pm.response.json();\n                if(pm.expect(responseData).to.have.nested.property(key)){\n                    pm.expect(typeof _.get(responseData, key, \"\")).to.equal(typeof userInputJson[key]);\n                }\n            })  \n        }\n    });\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Invalid ID supplied\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n    });\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Pet not found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n    });\n}\n\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "9bdcdce9-ad6f-47a0-a4e8-b99339fc6389",
              "name": "Updates a pet in the store with form data",
              "request": {
                "name": "Updates a pet in the store with form data",
                "description": {
                  "content": "",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "pet",
                    ":petId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "disabled": false,
                      "key": "name",
                      "value": "{{name}}",
                      "description": "Name of pet that needs to be updated"
                    },
                    {
                      "disabled": false,
                      "key": "status",
                      "value": "{{status}}",
                      "description": "Status of pet that needs to be updated"
                    }
                  ],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{petId}}",
                      "key": "petId",
                      "description": "(Required) ID of pet that needs to be updated"
                    }
                  ]
                },
                "method": "POST",
                "auth": {
                  "type": "oauth2",
                  "oauth2": [
                    {
                      "key": "scope",
                      "value": "write:pets read:pets"
                    },
                    {
                      "key": "authUrl",
                      "value": "https://petstore3.swagger.io/oauth/authorize"
                    },
                    {
                      "key": "grant_type",
                      "value": "implicit"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "ba32f6a3-8647-4160-aea4-44a0f06e2cfb",
                  "name": "Invalid input",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "pet",
                        ":petId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "name",
                          "value": "{{name}}"
                        },
                        {
                          "key": "status",
                          "value": "{{status}}"
                        }
                      ],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{petId}}",
                          "key": "petId",
                          "description": "(Required) ID of pet that needs to be updated"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: oauth2",
                          "type": "text/plain"
                        },
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      }
                    ],
                    "method": "POST",
                    "body": {}
                  },
                  "status": "Method Not Allowed",
                  "code": 405,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Load fs module\nvar fs = require('fs');\n\n// Read user input from the given path\nvar userInput = fs.readFileSync('/var/tmp/Roost/RoostGPT/apiTest0911/ec145363-0e22-43b0-b60a-5e1204e5e2a5/roost_user_input.txt', 'utf8');\n\n// Parse user input into JSON\nvar userInputJSON = JSON.parse(userInput);\n\n// Compare the statusCode variable with the response code for assertion\npm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n\n// Enhanced test script using user input\npm.test(\"Response body has user input\", function () {\n    pm.expect(pm.response.text()).to.include(userInputJSON.key);\n});\n\n// Check if the response time is below the user input value\npm.test(\"Response time is below user input value\", function () {\n    pm.expect(pm.response.responseTime).to.be.below(userInputJSON.responseTime);\n});\n\nif (pm.response.code == 405){\n    pm.test(\"Invalid input\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Method Not Allowed\");\n    });\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "e9ff5e05-5405-4d0e-97d4-3c8511c11ca0",
              "name": "Deletes a pet",
              "request": {
                "name": "Deletes a pet",
                "description": {
                  "content": "delete a pet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "pet",
                    ":petId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{petId}}",
                      "key": "petId",
                      "description": "(Required) Pet id to delete"
                    }
                  ]
                },
                "header": [
                  {
                    "disabled": false,
                    "key": "api_key",
                    "value": "{{api_key}}",
                    "description": ""
                  }
                ],
                "method": "DELETE",
                "auth": {
                  "type": "oauth2",
                  "oauth2": [
                    {
                      "key": "scope",
                      "value": "write:pets read:pets"
                    },
                    {
                      "key": "authUrl",
                      "value": "https://petstore3.swagger.io/oauth/authorize"
                    },
                    {
                      "key": "grant_type",
                      "value": "implicit"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "9da16db6-32b7-45e8-a6a2-14cc8e1ac042",
                  "name": "Invalid pet value",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "pet",
                        ":petId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{petId}}",
                          "key": "petId",
                          "description": "(Required) Pet id to delete"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: oauth2",
                          "type": "text/plain"
                        },
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      },
                      {
                        "disabled": false,
                        "key": "api_key",
                        "value": "{{api_key}}",
                        "description": ""
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Importing fs module to read the file\nvar fs = require('fs');\n\n// Reading user input from the given path\nvar user_input = fs.readFileSync('/var/tmp/Roost/RoostGPT/apiTest0911/ec145363-0e22-43b0-b60a-5e1204e5e2a5/roost_user_input.txt', 'utf8');\n\n// Parsing user input to JSON\nvar user_input_json = JSON.parse(user_input);\n\n// Compare the statusCode variable with the response code for assertion\npm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n\n// Check if responseTime is below the threshold set by user\npm.expect(pm.response.responseTime).to.be.below(user_input_json.responseTime);\n\n// Check if the response code is 400\nif (pm.response.code == 400){\n    pm.test(\"Invalid pet value\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n    });\n}\n\n// Checking if response body contains the key provided by user\npm.test(\"Response body contains user provided key\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData).to.have.property(user_input_json.key);\n});\n\n// Checking if response body contains the value provided by user for the given key\npm.test(\"Response body contains user provided value\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData[user_input_json.key]).to.eql(user_input_json.value);\n});\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "ee69da2a-7d39-4db0-adce-60e577e9a2d0",
              "name": "uploads an image",
              "request": {
                "name": "uploads an image",
                "description": {
                  "content": "",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "pet",
                    ":petId",
                    "uploadImage"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "disabled": false,
                      "key": "additionalMetadata",
                      "value": "{{additionalMetadata}}",
                      "description": "Additional Metadata"
                    }
                  ],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{petId}}",
                      "key": "petId",
                      "description": "(Required) ID of pet to update"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/octet-stream"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "auth": {
                  "type": "oauth2",
                  "oauth2": [
                    {
                      "key": "scope",
                      "value": "write:pets read:pets"
                    },
                    {
                      "key": "authUrl",
                      "value": "https://petstore3.swagger.io/oauth/authorize"
                    },
                    {
                      "key": "grant_type",
                      "value": "implicit"
                    }
                  ]
                },
                "body": {
                  "mode": "file"
                }
              },
              "response": [
                {
                  "id": "a2ecc5a2-4522-41e2-a273-54b90395c9a2",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "pet",
                        ":petId",
                        "uploadImage"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "additionalMetadata",
                          "value": "{{additionalMetadata}}"
                        }
                      ],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{petId}}",
                          "key": "petId",
                          "description": "(Required) ID of pet to update"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: oauth2",
                          "type": "text/plain"
                        },
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "file"
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"code\": 87570812,\n  \"type\": \"ea mollit\",\n  \"message\": \"veniam\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Read the user input file\nconst fs = require('fs');\nlet rawdata = fs.readFileSync('/var/tmp/Roost/RoostGPT/apiTest0911/ec145363-0e22-43b0-b60a-5e1204e5e2a5/roost_user_input.txt');\nlet userInput = JSON.parse(rawdata);\n\n// Use user input in test scripts\npm.test(\"Check user input data\", function () {\n    const responseJson = pm.response.json();\n    pm.expect(responseJson.id).to.eql(userInput.id);\n    pm.expect(responseJson.name).to.eql(userInput.name);\n    pm.expect(responseJson.category).to.eql(userInput.category);\n});\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "780f64ea-39cf-4455-a8ff-33e8b9df97d8",
      "name": "store",
      "item": [
        {
          "id": "e9653c49-b0a4-42ae-b051-4a585196f3e1",
          "name": "Returns pet inventories by status",
          "request": {
            "name": "Returns pet inventories by status",
            "description": {
              "content": "Returns a map of status codes to quantities",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "store",
                "inventory"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "api_key"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "1b982723-67ce-483c-a763-fcf33021905c",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "store",
                    "inventory"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "api_key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"qui_06\": 11813383,\n  \"Lorem881\": 60244876\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Importing fs module to read the user-provided input\nconst fs = require('fs');\n\n// Reading user input from the file\nfs.readFile('/var/tmp/Roost/RoostGPT/apiTest0911/ec145363-0e22-43b0-b60a-5e1204e5e2a5/roost_user_input.txt', 'utf8' , (err, data) => {\n  if (err) {\n    console.error(err)\n    return\n  }\n  // parsing the user input\n  let user_input = JSON.parse(data);\n\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n\n  if (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n      // Test if response body includes user input\n      pm.expect(pm.response.text()).to.include(user_input);\n    });\n  }\n})\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "44177c46-7386-4858-9105-ee116c052f5a",
          "name": "order",
          "item": [
            {
              "id": "435bdfbc-7a53-4717-97c9-d5fa2854ba6d",
              "name": "Place an order for a pet",
              "request": {
                "name": "Place an order for a pet",
                "description": {
                  "content": "Place a new order in the store",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "store",
                    "order"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "auth": null,
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "disabled": false,
                      "key": "id",
                      "value": "{{id}}"
                    },
                    {
                      "disabled": false,
                      "key": "petId",
                      "value": "{{petId}}"
                    },
                    {
                      "disabled": false,
                      "key": "quantity",
                      "value": "{{quantity}}"
                    },
                    {
                      "disabled": false,
                      "key": "shipDate",
                      "value": "{{shipDate}}"
                    },
                    {
                      "disabled": false,
                      "key": "status",
                      "value": "{{status}}",
                      "description": "Order Status"
                    },
                    {
                      "disabled": false,
                      "key": "complete",
                      "value": "{{complete}}"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "aaabb7af-43cc-4049-a2e3-1426ef757433",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "store",
                        "order"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "urlencoded",
                      "urlencoded": [
                        {
                          "disabled": false,
                          "key": "id",
                          "value": "{{id}}"
                        },
                        {
                          "disabled": false,
                          "key": "petId",
                          "value": "{{petId}}"
                        },
                        {
                          "disabled": false,
                          "key": "quantity",
                          "value": "{{quantity}}"
                        },
                        {
                          "disabled": false,
                          "key": "shipDate",
                          "value": "{{shipDate}}"
                        },
                        {
                          "disabled": false,
                          "description": {
                            "content": "Order Status",
                            "type": "text/plain"
                          },
                          "key": "status",
                          "value": "{{status}}"
                        },
                        {
                          "disabled": false,
                          "key": "complete",
                          "value": "{{complete}}"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"id\": 10,\n  \"petId\": 198772,\n  \"quantity\": 7,\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"approved\",\n  \"complete\": \"<boolean>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "091f05f1-d9fa-4a3b-a7c5-b224564beb92",
                  "name": "Invalid input",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "store",
                        "order"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "POST",
                    "body": {
                      "mode": "urlencoded",
                      "urlencoded": [
                        {
                          "disabled": false,
                          "key": "id",
                          "value": "{{id}}"
                        },
                        {
                          "disabled": false,
                          "key": "petId",
                          "value": "{{petId}}"
                        },
                        {
                          "disabled": false,
                          "key": "quantity",
                          "value": "{{quantity}}"
                        },
                        {
                          "disabled": false,
                          "key": "shipDate",
                          "value": "{{shipDate}}"
                        },
                        {
                          "disabled": false,
                          "description": {
                            "content": "Order Status",
                            "type": "text/plain"
                          },
                          "key": "status",
                          "value": "{{status}}"
                        },
                        {
                          "disabled": false,
                          "key": "complete",
                          "value": "{{complete}}"
                        }
                      ]
                    }
                  },
                  "status": "Method Not Allowed",
                  "code": 405,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Load user input from /var/tmp/Roost/RoostGPT/apiTest0911/ec145363-0e22-43b0-b60a-5e1204e5e2a5/roost_user_input.txt\nconst fs = require('fs');\nconst path = \"/var/tmp/Roost/RoostGPT/apiTest0911/ec145363-0e22-43b0-b60a-5e1204e5e2a5/roost_user_input.txt\";\nconst userInput = fs.readFileSync(path, 'utf8');\n\n// Parse user input for testing\nconst input = JSON.parse(userInput);\n\n// Compare the statusCode variable with the response code for assertion\npm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n\n        pm.test('Response has the `id` field',function(){\n            const responseData = pm.response.json();\n            if(pm.expect(responseData).to.have.nested.property(\"id\")){\n              pm.expect(typeof _.get(responseData, \"id\", 200)).to.equal(\"number\");\n              pm.expect(_.get(responseData, \"id\", 200)).to.equal(input.id); // Added test for id from user input\n            }\n        })  \n\n        pm.test('Response has the `petId` field',function(){\n            const responseData = pm.response.json();\n            if(pm.expect(responseData).to.have.nested.property(\"petId\")){\n              pm.expect(typeof _.get(responseData, \"petId\", 200)).to.equal(\"number\");\n              pm.expect(_.get(responseData, \"petId\", 200)).to.equal(input.petId); // Added test for petId from user input\n            }\n        })  \n\n        pm.test('Response has the `quantity` field',function(){\n            const responseData = pm.response.json();\n            if(pm.expect(responseData).to.have.nested.property(\"quantity\")){\n              pm.expect(typeof _.get(responseData, \"quantity\", 200)).to.equal(\"number\");\n              pm.expect(_.get(responseData, \"quantity\", 200)).to.equal(input.quantity); // Added test for quantity from user input\n            }\n        })  \n\n        pm.test('Response has the `shipDate` field',function(){\n            const responseData = pm.response.json();\n            if(pm.expect(responseData).to.have.nested.property(\"shipDate\")){\n              pm.expect(typeof _.get(pm.response.json(), \"shipDate\", \"\")).to.equal(\"string\");\n              pm.expect(_.get(pm.response.json(), \"shipDate\", \"\")).to.equal(input.shipDate); // Added test for shipDate from user input\n            }\n        })  \n\n        pm.test('Response has the `status` field',function(){\n            const responseData = pm.response.json();\n            if(pm.expect(responseData).to.have.nested.property(\"status\")){\n              pm.expect(typeof _.get(pm.response.json(), \"status\", \"\")).to.equal(\"string\");\n              pm.expect(_.get(pm.response.json(), \"status\", \"\")).to.equal(input.status); // Added test for status from user input\n            }\n        })  \n\n        pm.expect(_.get(pm.response.json(), \"status\", \"\")).to.be.oneOf([\"placed\",\"approved\",\"delivered\"]);\n\n        pm.test('Response has the `complete` field',function(){\n            const responseData = pm.response.json();\n            if(pm.expect(responseData).to.have.nested.property(\"complete\")){\n              pm.expect(typeof _.get(pm.response.json(), \"complete\", \"\")).to.equal(\"boolean\");\n              pm.expect(_.get(pm.response.json(), \"complete\", \"\")).to.equal(input.complete); // Added test for complete from user input\n            }\n        })  \n           \n    });\n}\n\nif (pm.response.code == 405){\n    pm.test(\"Invalid input\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Method Not Allowed\");\n    });\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "15e04e7d-8a64-48e9-9045-ec6aa1ef1aea",
              "name": "{orderId}",
              "item": [
                {
                  "id": "0666429f-eb38-48aa-928e-3b7e334a88ab",
                  "name": "Find purchase order by ID",
                  "request": {
                    "name": "Find purchase order by ID",
                    "description": {
                      "content": "For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.",
                      "type": "text/plain"
                    },
                    "url": {
                      "path": [
                        "store",
                        "order",
                        ":orderId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{orderId}}",
                          "key": "orderId",
                          "description": "(Required) ID of order that needs to be fetched"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "auth": null
                  },
                  "response": [
                    {
                      "id": "f6fa4838-3a0c-4885-a536-063399c19d1b",
                      "name": "successful operation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "store",
                            "order",
                            ":orderId"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{orderId}}",
                              "key": "orderId",
                              "description": "(Required) ID of order that needs to be fetched"
                            }
                          ]
                        },
                        "header": [
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"id\": 10,\n  \"petId\": 198772,\n  \"quantity\": 7,\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"approved\",\n  \"complete\": \"<boolean>\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "bbeff635-b4c7-466f-88f2-596f51b3e459",
                      "name": "Invalid ID supplied",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "store",
                            "order",
                            ":orderId"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{orderId}}",
                              "key": "orderId",
                              "description": "(Required) ID of order that needs to be fetched"
                            }
                          ]
                        },
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "body": "",
                      "cookie": [],
                      "_postman_previewlanguage": "text"
                    },
                    {
                      "id": "cb9cf5d9-15e6-423f-bb4f-d4f35f1f163f",
                      "name": "Order not found",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "store",
                            "order",
                            ":orderId"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{orderId}}",
                              "key": "orderId",
                              "description": "(Required) ID of order that needs to be fetched"
                            }
                          ]
                        },
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Not Found",
                      "code": 404,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "body": "",
                      "cookie": [],
                      "_postman_previewlanguage": "text"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "// Import the file system module\nconst fs = require('fs');\n\n// Load user input from the given file path\nconst userInputFilePath = '/var/tmp/Roost/RoostGPT/apiTest0911/ec145363-0e22-43b0-b60a-5e1204e5e2a5/roost_user_input.txt';\nconst userInput = fs.readFileSync(userInputFilePath, 'utf8');\n\n// Convert user input to JSON\nconst userInputData = JSON.parse(userInput);\n\n// Compare the statusCode variable with the response code for assertion\npm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n\n        // Test each key in the user input data\n        for (let key in userInputData) {\n            pm.test(`Response has the ${key} field`, function() {\n                const responseData = pm.response.json();\n                pm.expect(responseData).to.have.property(key);\n\n                // Check the type of each field\n                if (typeof userInputData[key] === 'number') {\n                    pm.expect(responseData[key]).to.be.a('number');\n                } else if (typeof userInputData[key] === 'string') {\n                    pm.expect(responseData[key]).to.be.a('string');\n                } else if (typeof userInputData[key] === 'boolean') {\n                    pm.expect(responseData[key]).to.be.a('boolean');\n                }\n            });\n        }\n    });\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Invalid ID supplied\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n    });\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Order not found\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n    });\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "e268ff2c-4589-47dd-962f-e59c6b85156c",
                  "name": "Delete purchase order by ID",
                  "request": {
                    "name": "Delete purchase order by ID",
                    "description": {
                      "content": "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors",
                      "type": "text/plain"
                    },
                    "url": {
                      "path": [
                        "store",
                        "order",
                        ":orderId"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{orderId}}",
                          "key": "orderId",
                          "description": "(Required) ID of the order that needs to be deleted"
                        }
                      ]
                    },
                    "method": "DELETE",
                    "auth": null
                  },
                  "response": [
                    {
                      "id": "a33c7acc-78dd-4bc2-ba26-8ee29456cba6",
                      "name": "Invalid ID supplied",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "store",
                            "order",
                            ":orderId"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{orderId}}",
                              "key": "orderId",
                              "description": "(Required) ID of the order that needs to be deleted"
                            }
                          ]
                        },
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "body": "",
                      "cookie": [],
                      "_postman_previewlanguage": "text"
                    },
                    {
                      "id": "3316b7e5-dcd9-4efc-b269-ca0d8627e9b9",
                      "name": "Order not found",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "store",
                            "order",
                            ":orderId"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{orderId}}",
                              "key": "orderId",
                              "description": "(Required) ID of the order that needs to be deleted"
                            }
                          ]
                        },
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "Not Found",
                      "code": 404,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "body": "",
                      "cookie": [],
                      "_postman_previewlanguage": "text"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "// Importing fs module to read user input file\nconst fs = require('fs');\n\n// Reading the user input file\nconst user_input = fs.readFileSync('/var/tmp/Roost/RoostGPT/apiTest0911/ec145363-0e22-43b0-b60a-5e1204e5e2a5/roost_user_input.txt', 'utf8');\n\n// Parsing the user input to JSON\nconst user_input_data = JSON.parse(user_input);\n\n// Compare the statusCode variable with the response code for assertion\npm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n\n// Asserting the response time to be below the user provided limit\nlet responseTime = user_input_data.responseTimeLimit;\npm.expect(pm.response.responseTime).to.be.below(responseTime);\n\n// Asserting the response body to be equal to the user provided expected response\nlet expectedResponseBody = user_input_data.expectedResponseBody;\npm.expect(pm.response.text()).to.eql(expectedResponseBody);\n\nif (pm.response.code == 400){\n    pm.test(\"Invalid ID supplied\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n    });\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Order not found\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n    });\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                }
              ],
              "event": []
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "06f59ae3-1280-4538-aba7-e91e923611d6",
      "name": "user",
      "item": [
        {
          "id": "d2213eb8-cc7c-4c0f-8b13-9c13103aced4",
          "name": "Create user",
          "request": {
            "name": "Create user",
            "description": {
              "content": "This can only be done by the logged in user.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "user"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": null,
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "disabled": false,
                  "key": "id",
                  "value": "{{id}}"
                },
                {
                  "disabled": false,
                  "key": "username",
                  "value": "{{username}}"
                },
                {
                  "disabled": false,
                  "key": "firstName",
                  "value": "{{firstName}}"
                },
                {
                  "disabled": false,
                  "key": "lastName",
                  "value": "{{lastName}}"
                },
                {
                  "disabled": false,
                  "key": "email",
                  "value": "{{email}}"
                },
                {
                  "disabled": false,
                  "key": "password",
                  "value": "{{password}}"
                },
                {
                  "disabled": false,
                  "key": "phone",
                  "value": "{{phone}}"
                },
                {
                  "disabled": false,
                  "key": "userStatus",
                  "value": "{{userStatus}}",
                  "description": "User Status"
                }
              ]
            }
          },
          "response": [
            {
              "id": "2b1c5c0b-a143-433a-b239-b33888454689",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "user"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "disabled": false,
                      "key": "id",
                      "value": "{{id}}"
                    },
                    {
                      "disabled": false,
                      "key": "username",
                      "value": "{{username}}"
                    },
                    {
                      "disabled": false,
                      "key": "firstName",
                      "value": "{{firstName}}"
                    },
                    {
                      "disabled": false,
                      "key": "lastName",
                      "value": "{{lastName}}"
                    },
                    {
                      "disabled": false,
                      "key": "email",
                      "value": "{{email}}"
                    },
                    {
                      "disabled": false,
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "disabled": false,
                      "key": "phone",
                      "value": "{{phone}}"
                    },
                    {
                      "disabled": false,
                      "description": {
                        "content": "User Status",
                        "type": "text/plain"
                      },
                      "key": "userStatus",
                      "value": "{{userStatus}}"
                    }
                  ]
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"id\": 10,\n  \"username\": \"theUser\",\n  \"firstName\": \"John\",\n  \"lastName\": \"James\",\n  \"email\": \"john@email.com\",\n  \"password\": \"12345\",\n  \"phone\": \"12345\",\n  \"userStatus\": 1\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Load the fs (file system) module\nvar fs = require('fs');\n\n// Read the user input file\nfs.readFile('/var/tmp/Roost/RoostGPT/apiTest0911/ec145363-0e22-43b0-b60a-5e1204e5e2a5/roost_user_input.txt', 'utf8', function(err, contents) {\n    // Log an error message if the file could not be read\n    if(err) {\n        console.log('Error: ', err);\n    }\n\n    // Parse the content of the user input file\n    var userInput = JSON.parse(contents);\n\n    // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n\n    // Loop over the user input to test each scenario\n    for(var i = 0; i < userInput.length; i++) {\n        // Test if the response status matches the expected status for the current scenario\n        pm.test(\"Status code is correct for scenario \" + (i+1), function () {\n            pm.expect(pm.response.code).to.be.eql(userInput[i].expectedStatus);\n        });\n\n        // Test if the response body matches the expected body for the current scenario\n        pm.test(\"Response body is correct for scenario \" + (i+1), function () {\n            pm.expect(pm.response.text()).to.be.eql(userInput[i].expectedBody);\n        });\n    }\n\n    // Test if the response code is 500\n    if (pm.response.code == 500){\n        pm.test(\"Successful operation\", function () {\n            pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n        });\n    }\n});\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "33339075-7194-4b6c-849d-24913e0c78b9",
          "name": "Creates list of users with given input array",
          "request": {
            "name": "Creates list of users with given input array",
            "description": {
              "content": "Creates list of users with given input array",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "user",
                "createWithList"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "[\n    {\n        \"id\": \"{{id}}\",\n        \"username\": \"{{username}}\",\n        \"firstName\": \"{{firstName}}\",\n        \"lastName\": \"{{lastName}}\",\n        \"email\": \"{{email}}\",\n        \"password\": \"{{password}}\",\n        \"phone\": \"{{phone}}\",\n        \"userStatus\": \"{{userStatus}}\"\n    },\n    {\n        \"id\": \"{{id}}\",\n        \"username\": \"{{username}}\",\n        \"firstName\": \"{{firstName}}\",\n        \"lastName\": \"{{lastName}}\",\n        \"email\": \"{{email}}\",\n        \"password\": \"{{password}}\",\n        \"phone\": \"{{phone}}\",\n        \"userStatus\": \"{{userStatus}}\"\n    }\n]",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "2398800b-0cb1-4e8c-b285-6b688396095f",
              "name": "Successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "user",
                    "createWithList"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "[\n    {\n        \"id\": 10,\n        \"username\": \"{{username}}\",\n        \"firstName\": \"{{firstName}}\",\n        \"lastName\": \"{{lastName}}\",\n        \"email\": \"{{email}}\",\n        \"password\": \"{{password}}\",\n        \"phone\": \"{{phone}}\",\n        \"userStatus\": 1\n    },\n    {\n        \"id\": 10,\n        \"username\": \"{{username}}\",\n        \"firstName\": \"{{firstName}}\",\n        \"lastName\": \"{{lastName}}\",\n        \"email\": \"{{email}}\",\n        \"password\": \"{{password}}\",\n        \"phone\": \"{{phone}}\",\n        \"userStatus\": 1\n    }\n]",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"id\": 10,\n  \"username\": \"theUser\",\n  \"firstName\": \"John\",\n  \"lastName\": \"James\",\n  \"email\": \"john@email.com\",\n  \"password\": \"12345\",\n  \"phone\": \"12345\",\n  \"userStatus\": 1\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "3e0c19db-21a5-470e-b449-5ebecde40a6c",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "user",
                    "createWithList"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "[\n    {\n        \"id\": 10,\n        \"username\": \"{{username}}\",\n        \"firstName\": \"{{firstName}}\",\n        \"lastName\": \"{{lastName}}\",\n        \"email\": \"{{email}}\",\n        \"password\": \"{{password}}\",\n        \"phone\": \"{{phone}}\",\n        \"userStatus\": 1\n    },\n    {\n        \"id\": 10,\n        \"username\": \"{{username}}\",\n        \"firstName\": \"{{firstName}}\",\n        \"lastName\": \"{{lastName}}\",\n        \"email\": \"{{email}}\",\n        \"password\": \"{{password}}\",\n        \"phone\": \"{{phone}}\",\n        \"userStatus\": 1\n    }\n]",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Importing file system module\nconst fs = require('fs');\n\n// Reading user input\nconst userInput = fs.readFileSync('/var/tmp/Roost/RoostGPT/apiTest0911/ec145363-0e22-43b0-b60a-5e1204e5e2a5/roost_user_input.txt', 'utf8');\n\n// Parsing user input to JSON\nconst userInputJSON = JSON.parse(userInput);\n\n// Getting expected status code and response time from user input\nconst expectedStatusCode = userInputJSON.statusCode;\nconst expectedResponseTime = userInputJSON.responseTime;\n\n// Compare the expectedStatusCode variable with the response code for assertion\npm.test(\"Status code is correct\", function () {\n  pm.expect(pm.response.code).to.eql(expectedStatusCode);\n});\n\n// Check if the response time is below the expected response time\npm.test(\"Response time is below \" + expectedResponseTime, function () {\n  pm.expect(pm.response.responseTime).to.be.below(expectedResponseTime);\n});\n\n// Check if the status message is correct based on the status code\npm.test(\"Status message is correct\", function () {\n  if (pm.response.code == 200){\n    pm.expect(pm.response.status).to.eql(\"OK\");\n  } else if (pm.response.code == 500){\n    pm.expect(pm.response.status).to.eql(\"Internal Server Error\");\n  }\n});\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "79dc4e7f-425a-4a89-a021-d306cfaef583",
          "name": "Logs user into the system",
          "request": {
            "name": "Logs user into the system",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "user",
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "username",
                  "value": "{{username}}",
                  "description": "The user name for login"
                },
                {
                  "disabled": false,
                  "key": "password",
                  "value": "{{password}}",
                  "description": "The password for login in clear text"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/xml"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "3ab93897-babc-4bba-8b72-4a685f4fb011",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "user",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "username",
                      "value": "{{username}}"
                    },
                    {
                      "key": "password",
                      "value": "{{password}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/xml"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "calls per hour allowed by the user",
                  "key": "X-Rate-Limit",
                  "value": "{{X-Rate-Limit}}"
                },
                {
                  "disabled": false,
                  "description": "date in UTC when token expires",
                  "key": "X-Expires-After",
                  "value": "{{X-Expires-After}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "\"culpa\"",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "a1aeef96-3704-499f-8609-9457d25c5eca",
              "name": "Invalid username/password supplied",
              "originalRequest": {
                "url": {
                  "path": [
                    "user",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "username",
                      "value": "{{username}}"
                    },
                    {
                      "key": "password",
                      "value": "{{password}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Reading user input from file\nvar fs = require('fs');\nvar data = fs.readFileSync('/var/tmp/Roost/RoostGPT/apiTest0911/ec145363-0e22-43b0-b60a-5e1204e5e2a5/roost_user_input.txt', 'utf8');\n\n// Parsing the user input data\nvar userInput = JSON.parse(data);\n\n// Compare the statusCode variable with the response code for assertion\npm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n      // Using user input for additional validation\n      pm.expect(pm.response.json()).to.deep.equal(userInput.successResponse);\n    });\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Invalid username/password supplied\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n      // Using user input for additional validation\n      pm.expect(pm.response.json()).to.deep.equal(userInput.errorResponse);\n    });\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "b59ed680-adeb-41d3-999a-2030ce6f67e5",
          "name": "Logs out current logged in user session",
          "request": {
            "name": "Logs out current logged in user session",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "user",
                "logout"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "94a769b0-1e41-48df-908f-ef5e5ddad594",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "user",
                    "logout"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Import fs module for handling and manipulating file I/O\nconst fs = require('fs');\n\n// Define the path to the user input file\nconst path = '/var/tmp/Roost/RoostGPT/apiTest0911/ec145363-0e22-43b0-b60a-5e1204e5e2a5/roost_user_input.txt';\n\n// Read the user input file\nfs.readFile(path, 'utf8', function(err, data) {\n    if (err) {\n        console.error('Error reading user input file:', err);\n        return;\n    }\n\n    // Parse the user input data\n    let userInput = JSON.parse(data);\n\n    // Extract the expected status code from the user input\n    let expectedStatusCode = userInput.expectedStatusCode;\n\n    // Compare the expected status code with the response code for assertion\n    pm.test(`Status code is ${expectedStatusCode}`, function () {\n        pm.expect(pm.response.code).to.equal(expectedStatusCode);\n    });\n\n    // If the status code is 500, check if the response status is \"Internal Server Error\"\n    if (pm.response.code === 500) {\n        pm.test(\"Response status is 'Internal Server Error'\", function () {\n            pm.expect(pm.response.status).to.eql(\"Internal Server Error\");\n        });\n    }\n\n    // Extract the expected response time from the user input\n    let expectedResponseTime = userInput.expectedResponseTime;\n\n    // Check if the response time is below the expected response time\n    pm.test(`Response time is below ${expectedResponseTime}`, function () {\n        pm.expect(pm.response.responseTime).to.be.below(expectedResponseTime);\n    });\n});\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "067e17a3-0cc2-4e93-90d5-4153be0d7ea1",
          "name": "{username}",
          "item": [
            {
              "id": "17222d8c-98bf-4a15-9dc0-91cbe9b65a49",
              "name": "Get user by user name",
              "request": {
                "name": "Get user by user name",
                "description": {
                  "content": "",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "user",
                    ":username"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{username}}",
                      "key": "username",
                      "description": "(Required) The name that needs to be fetched. Use user1 for testing. "
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "auth": null
              },
              "response": [
                {
                  "id": "e30695d8-b7b7-4105-b049-c8ff67224532",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{username}}",
                          "key": "username",
                          "description": "(Required) The name that needs to be fetched. Use user1 for testing. "
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"id\": 10,\n  \"username\": \"theUser\",\n  \"firstName\": \"John\",\n  \"lastName\": \"James\",\n  \"email\": \"john@email.com\",\n  \"password\": \"12345\",\n  \"phone\": \"12345\",\n  \"userStatus\": 1\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "b127725a-8074-414f-b56b-823c51d91c99",
                  "name": "Invalid username supplied",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{username}}",
                          "key": "username",
                          "description": "(Required) The name that needs to be fetched. Use user1 for testing. "
                        }
                      ]
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                },
                {
                  "id": "0968a1ce-182b-4d76-9988-e73a459cfe30",
                  "name": "User not found",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{username}}",
                          "key": "username",
                          "description": "(Required) The name that needs to be fetched. Use user1 for testing. "
                        }
                      ]
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "ce1816eb-d10a-4319-b98f-7a6aab4f85e9",
              "name": "Update user",
              "request": {
                "name": "Update user",
                "description": {
                  "content": "This can only be done by the logged in user.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "user",
                    ":username"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{username}}",
                      "key": "username",
                      "description": "(Required) name that need to be deleted"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "method": "PUT",
                "auth": null,
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "disabled": false,
                      "key": "id",
                      "value": "{{id}}"
                    },
                    {
                      "disabled": false,
                      "key": "username",
                      "value": "{{username}}"
                    },
                    {
                      "disabled": false,
                      "key": "firstName",
                      "value": "{{firstName}}"
                    },
                    {
                      "disabled": false,
                      "key": "lastName",
                      "value": "{{lastName}}"
                    },
                    {
                      "disabled": false,
                      "key": "email",
                      "value": "{{email}}"
                    },
                    {
                      "disabled": false,
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "disabled": false,
                      "key": "phone",
                      "value": "{{phone}}"
                    },
                    {
                      "disabled": false,
                      "key": "userStatus",
                      "value": "{{userStatus}}",
                      "description": "User Status"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "72cb06c5-34bc-49d6-9697-be68f27bf36b",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{username}}",
                          "key": "username",
                          "description": "(Required) name that need to be deleted"
                        }
                      ]
                    },
                    "method": "PUT",
                    "body": {
                      "mode": "urlencoded",
                      "urlencoded": [
                        {
                          "disabled": false,
                          "key": "id",
                          "value": "{{id}}"
                        },
                        {
                          "disabled": false,
                          "key": "username",
                          "value": "{{username}}"
                        },
                        {
                          "disabled": false,
                          "key": "firstName",
                          "value": "{{firstName}}"
                        },
                        {
                          "disabled": false,
                          "key": "lastName",
                          "value": "{{lastName}}"
                        },
                        {
                          "disabled": false,
                          "key": "email",
                          "value": "{{email}}"
                        },
                        {
                          "disabled": false,
                          "key": "password",
                          "value": "{{password}}"
                        },
                        {
                          "disabled": false,
                          "key": "phone",
                          "value": "{{phone}}"
                        },
                        {
                          "disabled": false,
                          "description": {
                            "content": "User Status",
                            "type": "text/plain"
                          },
                          "key": "userStatus",
                          "value": "{{userStatus}}"
                        }
                      ]
                    }
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Import fs module for file operations\nvar fs = require('fs');\n\n// Read user input from provided path\nvar userInputPath = '/var/tmp/Roost/RoostGPT/apiTest0911/ec145363-0e22-43b0-b60a-5e1204e5e2a5/roost_user_input.txt';\nvar userInput = fs.readFileSync(userInputPath, 'utf8');\n\n// Parse user input as JSON\nvar userInputData;\ntry {\n    userInputData = JSON.parse(userInput);\n} catch (error) {\n    console.error('Error parsing user input:', error);\n    throw error;\n}\n\n// Compare the statusCode variable with the response code for assertion\npm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n\n// Let's use user input to refine our response time expectation\nif (userInputData.hasOwnProperty('expectedResponseTime')) {\n    pm.expect(pm.response.responseTime).to.be.below(userInputData.expectedResponseTime);\n}\n\nif (pm.response.code == 500){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n    });\n} else if (userInputData.hasOwnProperty('expectedStatus')) {\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(userInputData.expectedStatus);\n    });\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "df3f8bc7-b4b6-4087-8ee2-67f5a63628b3",
              "name": "Delete user",
              "request": {
                "name": "Delete user",
                "description": {
                  "content": "This can only be done by the logged in user.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "user",
                    ":username"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{username}}",
                      "key": "username",
                      "description": "(Required) The name that needs to be deleted"
                    }
                  ]
                },
                "method": "DELETE",
                "auth": null
              },
              "response": [
                {
                  "id": "9d21a84c-0cb8-4bc3-a2e1-dc0a5a4f414d",
                  "name": "Invalid username supplied",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{username}}",
                          "key": "username",
                          "description": "(Required) The name that needs to be deleted"
                        }
                      ]
                    },
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                },
                {
                  "id": "3a1be12a-2d84-48fb-a479-042db15f67cd",
                  "name": "User not found",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{username}}",
                          "key": "username",
                          "description": "(Required) The name that needs to be deleted"
                        }
                      ]
                    },
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Import fs module for reading user input text file\nvar fs = require('fs');\n\n// Read user input from text file\nvar userInput = fs.readFileSync('/var/tmp/Roost/RoostGPT/apiTest0911/ec145363-0e22-43b0-b60a-5e1204e5e2a5/roost_user_input.txt', 'utf8');\n\n// Parse the user input as JSON\nvar data = JSON.parse(userInput);\n\n// Set the request body with user input\npm.request.body.update(data);\n\n// Compare the statusCode variable with the response code for assertion\npm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n\nif (pm.response.code == 400){\n    pm.test(\"Invalid username supplied\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n    });\n}\n\nif (pm.response.code == 404){\n    pm.test(\"User not found\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n    });\n}\n\n// Add assertions for the response body based on user input\npm.test(\"Response body should match user input\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData).to.eql(data);\n});\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        }
      ],
      "event": []
    }
  ],
  "event": [],
  "variable": [
    {
      "type": "string",
      "value": "https://petstore3.swagger.io/api/v3",
      "key": "baseUrl"
    }
  ],
  "info": {
    "_postman_id": "fef3ce37-af3b-4c77-bc29-9ae0608e2da2",
    "name": "Swagger Petstore - OpenAPI 3.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": {
      "content": "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\n_If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)\n\nContact Support:\n Email: apiteam@swagger.io",
      "type": "text/plain"
    }
  }
}