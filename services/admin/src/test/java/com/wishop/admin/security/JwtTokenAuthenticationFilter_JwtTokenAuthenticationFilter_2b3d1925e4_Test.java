// Test generated by RoostGPT for test testJavaParserAst using AI Type Open AI and AI Model gpt-4

package com.wishop.admin.security;

import java.io.IOException;
import java.util.List;
import java.util.stream.Collectors;
import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.filter.OncePerRequestFilter;
import com.wishop.common.configurations.JwtConfig;
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.when;

public class JwtTokenAuthenticationFilter_JwtTokenAuthenticationFilter_2b3d1925e4_Test {

    @InjectMocks
    JwtTokenAuthenticationFilter jwtTokenAuthenticationFilter;

    @Mock
    JwtConfig jwtConfig;

    @BeforeEach
    public void setUp() throws Exception {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testJwtTokenAuthenticationFilter_Success() {

        when(jwtConfig.getUri()).thenReturn("/login");
        jwtTokenAuthenticationFilter = new JwtTokenAuthenticationFilter(jwtConfig);
        assertNotNull(jwtTokenAuthenticationFilter);
    }

    @Test
    public void testJwtTokenAuthenticationFilter_Failure() {

        when(jwtConfig.getUri()).thenReturn("");
        jwtTokenAuthenticationFilter = new JwtTokenAuthenticationFilter(jwtConfig);
        assertNotNull(jwtTokenAuthenticationFilter);
    }
}
