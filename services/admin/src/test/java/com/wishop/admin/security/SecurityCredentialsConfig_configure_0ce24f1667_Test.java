// Test generated by RoostGPT for test testJavaParserAst using AI Type Open AI and AI Model gpt-4

package com.wishop.admin.security;

import javax.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import com.wishop.common.configurations.JwtConfig;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class SecurityCredentialsConfig_configure_0ce24f1667_Test {

    @Mock
    private UserDetailsService userDetailsService;

    @Mock
    private BCryptPasswordEncoder bCryptPasswordEncoder;

    @InjectMocks
    private WebSecurityConfigurerAdapter webSecurityConfigurerAdapter;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testConfigureAuthenticationManagerBuilder_Success() throws Exception {
        AuthenticationManagerBuilder auth = mock(AuthenticationManagerBuilder.class);
        doNothing().when(auth).userDetailsService(userDetailsService).passwordEncoder(bCryptPasswordEncoder);
        webSecurityConfigurerAdapter.configure(auth);
        verify(auth, times(1)).userDetailsService(userDetailsService);
    }

    @Test
    public void testConfigureAuthenticationManagerBuilder_Exception() throws Exception {
        AuthenticationManagerBuilder auth = mock(AuthenticationManagerBuilder.class);
        doThrow(new Exception("Failed")).when(auth).userDetailsService(userDetailsService).passwordEncoder(bCryptPasswordEncoder);
        assertThrows(Exception.class, () -> webSecurityConfigurerAdapter.configure(auth));
    }
}
