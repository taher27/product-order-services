// Test generated by RoostGPT for test testJavaParserAst using AI Type Open AI and AI Model gpt-4

package com.wishop.admin.security;

import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import com.wishop.common.configurations.JwtConfig;
import com.wishop.common.configurations.JwtTokenAuthenticationFilter;

import static org.mockito.Mockito.*;

public class SecurityCredentialsConfig_configure_3608e2878c_Test {

    @InjectMocks
    SecurityCredentialsConfig securityCredentialsConfig;

    @Mock
    JwtConfig jwtConfig;

    @Mock
    HttpSecurity httpSecurity;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testConfigure() throws Exception {
        when(jwtConfig.getUri()).thenReturn("/uri");
        when(httpSecurity.csrf().disable()).thenReturn(httpSecurity);
        when(httpSecurity.sessionManagement()).thenReturn(mock(HttpSecurity.SessionManagementConfigurer.class));
        when(httpSecurity.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)).thenReturn(httpSecurity);
        when(httpSecurity.addFilterAfter(any(JwtTokenAuthenticationFilter.class), eq(UsernamePasswordAuthenticationFilter.class))).thenReturn(httpSecurity);
        when(httpSecurity.authorizeRequests()).thenReturn(mock(HttpSecurity.AuthorizeRequests.class));
        when(httpSecurity.authorizeRequests().antMatchers("/ping**")).thenReturn(mock(HttpSecurity.UrlMatcherRegistry.class));
        when(httpSecurity.authorizeRequests().antMatchers("/actuator/**")).thenReturn(mock(HttpSecurity.UrlMatcherRegistry.class));
        when(httpSecurity.authorizeRequests().antMatchers(HttpMethod.POST, jwtConfig.getUri())).thenReturn(mock(HttpSecurity.UrlMatcherRegistry.class));
        when(httpSecurity.exceptionHandling()).thenReturn(mock(HttpSecurity.ExceptionHandlingConfigurer.class));

        securityCredentialsConfig.configure(httpSecurity);

        verify(httpSecurity, times(1)).csrf().disable();
        verify(httpSecurity, times(1)).sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);
        verify(httpSecurity, times(1)).addFilterAfter(any(JwtTokenAuthenticationFilter.class), eq(UsernamePasswordAuthenticationFilter.class));
        verify(httpSecurity.authorizeRequests(), times(1)).antMatchers("/ping**").permitAll();
        verify(httpSecurity.authorizeRequests(), times(1)).antMatchers("/actuator/**").permitAll();
        verify(httpSecurity.authorizeRequests(), times(1)).antMatchers(HttpMethod.POST, jwtConfig.getUri()).permitAll();
        verify(httpSecurity, times(1)).exceptionHandling();
    }
}
